
import Header from './Header';
import { Link, useNavigate } from 'react-router-dom';
import { Button, Card, Col, Form, Row, Table } from 'react-bootstrap';
import { useEffect, useState } from 'react';
import { createPrescription, getPrescriptionByPatientId } from '../services/PrescriptionService';

export const PresCriptionComponent = ({ patientId, clearTrigger, setClearTrigger}) => {

  const navigator = useNavigate();  
  function handlePatientRegistration() {
      <Link to="/registerpatient"></Link>
  }

  const [precDesc, setPrecDesc] = useState('');
  const [precOther, setPrecOther] = useState('');
  const [precDiagnose, setPrecDiagnose] = useState('');
  const [precStatus, setPrecStatus] = useState('');
  const [precid, setPrescId] = useState('');
  const [setPresDate, setPrecDate] = useState('');
  const [prescriptions, setPrescriptions] = useState([]);
  const [selectedPrescription, setSelectedPrescription] = useState(null);

  const [presError, setPressErrors] = useState({
      pDescError: '',
      pOtherError: '',
      pDiagnoseError:''
    })

useEffect(() => {
  if (patientId) {
    const fetchPrescriptions = async () => {
      try {
        const tempPrescription = { "presPatientId": patientId };
        const response = await getPrescriptionByPatientId(tempPrescription);
        setPrescriptions(response.data);
      } catch (error) {
        console.error("Failed to fetch prescriptions:", error);
      }
    };
    fetchPrescriptions();
  }
}, [patientId]);

  useEffect(() => {
    if (!patientId) {
      setPrescriptions([]); // Clear table when patientId is null
      clearFields();
      
    }
  }, [patientId]);

function getPrescriptionsByPatientID() {
      const fetchPrescriptions = async () => {
      try {
        const tempPrescription = { "presPatientId": patientId };
        const response = await getPrescriptionByPatientId(tempPrescription);
        setPrescriptions(response.data);
      } catch (error) {
        console.error("Failed to fetch prescriptions:", error);
      }
    };
    fetchPrescriptions();
}



function prescriptioFormValidation() {

  let valid = true;
  const errorsCopy = {...presError}

  if (precDiagnose.trim()) {
    errorsCopy.pDiagnoseError ='';
  } else {
    errorsCopy.pDiagnoseError = 'Diagnose Details required';
    valid = false;
  }
  if (precDesc.trim()) {
    errorsCopy.pDescError ='';
  } else {
    errorsCopy.pDescError = 'Prescription is required';
    valid = false;
  }
  if (precOther.trim()) {
    errorsCopy.pOtherError ='';
  } else {
    errorsCopy.pOtherError = 'Other information is required';
    valid = false;
  }
    setPressErrors(errorsCopy)
    return valid;
}

function handlePresDescription(e){
  setPrecDesc(e.target.value);
}

function handlePresDiagnoseDetails(e) {
  setPrecDiagnose(e.target.value);
}

function handlePresOther(e) {
  setPrecOther(e.target.value);
}

function handlePrecSaveButton(e){
  e.preventDefault();
  if (prescriptioFormValidation()) {
    const newPrescription = {
      "presDateTime" : "",
      "presDiagnose" : precDiagnose,
      "presDec" : precDesc,
      "preOthers" : precOther ,
      "presPatientId" : patientId,
      "presStatus" : "SAVED"
    } 
    createPrescription (newPrescription).then((response) => {
     getPrescriptionsByPatientID();
    }).catch(error => {
      console.error(error);
    })
    clearFields();
  }
}

function handlePrecPrescribeButton() {
   const newPrescription = {
      "presDateTime" : "", // date will be generated by the server
      "presDiagnose" : precDiagnose,
      "presDec" : precDesc,
      "preOthers" : precOther ,
      "presPatientId" : patientId,
      "presStatus" : "PRESCRIBED",
      "id" : precid 
    } 
    createPrescription (newPrescription).then((response) => {
      console.log(response.data);
    }).catch(error => {
      console.error(error);
    })
}

function handleRowClicked(prescription) {
  setSelectedPrescription(prescription); 
}

useEffect(() => {
  if (selectedPrescription) {
    setPrecDesc(selectedPrescription.presDec);
    setPrecOther(selectedPrescription.preOthers);
    setPrecDiagnose(selectedPrescription.presDiagnose);
    setPrecDate(selectedPrescription.presDateTime);
    setPrecStatus(selectedPrescription.presStatus);
    setPrescId(selectedPrescription.id);
  }
}, [selectedPrescription]);


useEffect(() => {
  if (precid) {
    console.log("Updated prescId:", precid);
  }
}, [precid]);

function handlePrescriptionClear(){
  clearFields()
}

function clearFields() {
  setPrecOther('');
  setPrecDesc('');
  setPrecDiagnose('');
  setPrecStatus('');
  setPrescId('');
  setPrecDate('');
}


  return (
    <>
     <Row>
        <Col className="d-flex justify-content-left" >
          <Card style={{ width: '100%' }}>
            <Card.Body>
              <Card.Title>Create Prescription</Card.Title>
              <Card.Text>
                <Form>
                  <Row>
                    <Col >
                      <Form.Group className="mb-6" controlId="formPresDiagnoseDetails">
                        <Form.Label>Diagnose details</Form.Label>
                        <Form.Control
                          type="text"
                          placeholder="Enter Diagnos details"
                          value={precDiagnose}
                          onChange={handlePresDiagnoseDetails}
                          className={`form-control ${presError.pDiagnoseError ? 'is-invalid' : ''}`}
                        />
                        {presError.pDiagnoseError && <div className="invalid-feedback">{presError.pDiagnoseError}</div>}
                      </Form.Group>
                    </Col>
                  </Row>
                  <Row>
                    <Col>
                      <Form.Group className="mb-3" controlId="formPresPrescrition">
                        <Form.Label>Prescription :</Form.Label>
                        <Form.Control
                          type="text"
                          placeholder="Enter Prescription"
                          value={precDesc}
                          onChange={handlePresDescription}
                          className={`form-control ${presError.pDescError ? 'is-invalid' : ''}`}
                        />
                        {presError.pDescError && <div className="invalid-feedback">{presError.pDescError}</div>}
                      </Form.Group>
                    </Col>
                  </Row>
                  <Row>
                    <Col>
                      <Form.Group className="mb-3" controlId="formPresOther">
                        <Form.Label>Other Details :</Form.Label>
                        <Form.Control
                          type="text"
                          placeholder="Other details"
                          value={precOther}
                          onChange={handlePresOther}
                          className={`form-control ${presError.pOtherError ? 'is-invalid' : ''}`}
                        />
                        {presError.pOtherError && <div className="invalid-feedback">{presError.pOtherError}</div>}
                      </Form.Group>
                    </Col>
                  </Row>
                  <Row>
                    <Col xs="auto" className="d-flex justify-content-end align-items-end">
                      <div>
                        <Button className="me-2" variant="primary" onClick={handlePrecSaveButton} 
                         disabled={precStatus === 'SAVED' | precStatus === 'PRESCRIBED'}>
                          Save
                        </Button>
                        <Button variant="primary" onClick={handlePrecPrescribeButton} disabled={precStatus !== 'SAVED'}>
                          Prescribe
                        </Button>
                        <Button variant="secondary" onClick={handlePrescriptionClear}>
                          Clear
                        </Button>
                      </div>
                    </Col>
                  </Row>
                </Form>
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>

        <Col className="d-flex justify-content-left" >
          <Card style={{ width: '100%' }}>
            <Card.Body>
              <Card.Title>Prescriptions history</Card.Title> {/* Thisis a table */}
              <Card.Text>
                <Form>
                 <Table striped bordered hover>
                  <thead>
                    <tr>
                      <th>#</th>
                      <th>Date</th>
                      <th>Diagnose</th>
                      <th>Prescrition</th>
                      <th>Other</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                  {
                    prescriptions.map(prescription => 
                      <tr key={prescription.id } onClick={() => handleRowClicked(prescription)}>
                        <td>{prescription.id }</td>
                        <td>{prescription.presDateTime}</td>
                        <td>{prescription.presDiagnose}</td>
                        <td>{prescription.presDec}</td>
                        <td>{prescription.preOthers}</td>
                        <td>{prescription.presStatus}</td>
                      </tr>
                    )
                  }
                  </tbody>
                </Table>
                </Form>
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      </Row>


    </>


      )
  
}
